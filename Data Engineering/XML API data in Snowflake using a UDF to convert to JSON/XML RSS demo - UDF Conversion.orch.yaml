type: "orchestration"
version: "1.0"
pipeline:
  components:
    Start:
      type: "start"
      transitions:
        unconditional:
        - "Create function XML_TO_JSON"
      parameters:
        componentName: "Start"
    Create function XML_TO_JSON:
      type: "sql-script"
      transitions:
        success:
        - "Run XML RSS demo - UDF Transformation"
      parameters:
        componentName: "Create function XML_TO_JSON"
        sqlScript: "CREATE OR REPLACE FUNCTION XML_TO_JSON(xml_value string)\r\n \
          \ RETURNS VARCHAR\r\n  LANGUAGE PYTHON\r\n  RUNTIME_VERSION=3.8\r\n  HANDLER\
          \ = 'convert_xml_to_json'\r\n  PACKAGES = ('xmltodict')\r\n  COMMENT = 'UDF\
          \ to convert XML string into JSON'\r\nAS\r\n$$\r\n\r\nimport xmltodict\r\
          \nimport json\r\n\r\ndef convert_xml_to_json(xml):\r\n  return(json.dumps(xmltodict.parse(xml)))\r\
          \n$$;\r\n"
    Run XML RSS demo - UDF Transformation:
      type: "run-transformation"
      parameters:
        componentName: "Run XML RSS demo - UDF Transformation"
        transformationJob: "Data Engineering/XML API data in Snowflake using a UDF\
          \ to convert to JSON/XML RSS demo - UDF Transformation"
        setScalarVariables:
        setGridVariables:
design:
  components:
    Start:
      position:
        x: -130
        "y": 0
      tempMetlId: 1
    Create function XML_TO_JSON:
      position:
        x: 160
        "y": 0
      tempMetlId: 2
    Run XML RSS demo - UDF Transformation:
      position:
        x: 530
        "y": 0
      tempMetlId: 3
  notes:
    "1":
      position:
        x: -40
        "y": -150
      size:
        height: 250
        width: 470
      theme: "white"
      content: |-
        Create a Python user-defined function (UDF) to convert XML string values to JSON. The UDF uses the `xmltodict` package to parse XML strings and convert them to JSON strings.

        This UDF is then available to use in downstream transformations to transform XML data to the JSON format.
